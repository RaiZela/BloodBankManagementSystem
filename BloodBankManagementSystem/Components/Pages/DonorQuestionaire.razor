@using BLL.Services.Donation
@using BloodBankManagementSystem.BLL.Services.Questions
@using MudBlazor
@using Newtonsoft.Json
@using Shared.ViewModels
@using static General.Enums
@using General
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<MudForm @ref="form" @onValidSubmit="SubmitAnswers"> 
    @foreach (var categoryGroup in GroupedQuestionsByCategory)
    {
        <MudExpansionPanel Text="@categoryGroup.Key">
            @foreach (var question in categoryGroup.Value)
            {
                <MudStack>
                    <MudText Typo="Typo.h6">@question.Text</MudText>

                    @if (question.Type == QuestionType.Text)
                    {
                        <!-- Text input question -->
                        <MudTextField @bind-Value="question.Answers.FirstOrDefault()" Label="Answer" Placeholder="Type your answer here" />
                    }
                    else if (question.Type == QuestionType.SelectBox)
                    {
                        <!-- Dropdown question with predefined answers -->
                        <MudSelect @bind-Value="question.Answers" Label="Select an answer">
                            @foreach (var answer in question.Answers)
                            {
                                <MudSelectItem Value="answer.ID">@answer.AnswerText</MudSelectItem>
                            }
                        </MudSelect>
                    }
                </MudStack>
            }
        </MudExpansionPanel>
    }

    <MudButton Type="Submit" Color="Color.Primary">Submit</MudButton>
</MudForm>

@code {
    @code {
        private MudForm form;
        public Dictionary<string, List<QuestionViewModel>> GroupedQuestionsByCategory { get; set; } = new();

        [Inject] private IDonorService DonorService { get; set; }
        [Inject] private IQuestionService QuestionService { get; set; }

        protected override async Task OnInitializedAsync()
        {
            // Load and group the questions by category
            var questions = await LoadQuestionsAsync();
            GroupQuestionsByCategory(questions);
        }

        private async Task<IEnumerable<QuestionViewModel>> LoadQuestionsAsync()
        {
            // Fetch questions from your database (this is an example)
            var questions = await QuestionService.GetAllQuestionsAsync();

            if (questions.Success)
            {
                if (questions.Result == null || questions.Result.Count() == 0)
                    return new List<QuestionViewModel>();
                foreach (var question in questions.Result)
                {
                    if (question.Type == QuestionType.SelectBox) // If it's a dropdown question
                    {
                        question.Answers = question.Answers;
                    }
                }

            }

            return questions.Result;
        }

        private void GroupQuestionsByCategory(IEnumerable<QuestionViewModel> questions)
        {
            GroupedQuestionsByCategory = questions
                .GroupBy(q => q.Category.ToString())
                .ToDictionary(g => g.Key, g => g.ToList());
        }

        private async Task SubmitAnswers()
        {
            if (form.IsValid)
            {
                // Save the responses for the donor to the Responses table
                foreach (var categoryGroup in GroupedQuestionsByCategory)
                {
                    foreach (var question in categoryGroup.Value)
                    {
                        var response = new ResponseViewModel
                        {
                            DonorID = currentDonorId, // This will be your current donor's ID
                            QuestionID = question.ID,
                            AnswerID = question.SelectedAnswerId, // If it's a dropdown answer
                            AnswerText = question.AnswerText // If it's a text answer
                        };

                        // Add the response to your database
                        _dbContext.Responses.Add(response);
                    }
                }

                await _dbContext.SaveChangesAsync();
            }
        }
    }

}