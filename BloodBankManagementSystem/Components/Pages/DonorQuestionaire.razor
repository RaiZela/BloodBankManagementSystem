  @using BLL.Services.Donation
 @using BloodBankManagementSystem.BLL.Services.Questions
 @using MudBlazor
 @using Newtonsoft.Json
 @using Shared.ViewModels
 @using static General.Enums
 @using General
 @rendermode InteractiveServer
 @using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<style>
    .category-header {
        background-color: rgba(33, 150, 243, 1);
        padding: 8px;
        margin-bottom: 16px;
        border-radius: 5px;
        color: white;
    }
</style>
<MudPaper Class="pa-4">

    <MudText Typo="Typo.h6" GutterBottom="true">Questionnaire</MudText>

    @if (questionsList.Count == 0)
    {
        <MudText Typo="Typo.body1">No questions available.</MudText>
    }
    else
    {
        <MudForm @ref="form">
            @foreach (var category in questionsList.GroupBy(q => q.Category))
            {
                <MudExpansionPanel>
                    <TitleContent>
                        <div class="d-flex category-header">
                            <MudText><strong>"@category.Key.GetDisplayName()</strong>"</MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        @foreach (var question in category)
                        {
                            <MudText Typo="Typo.h6">@question.Text</MudText>

                            @switch (question.Type)
                            {
                                case QuestionType.Text:
                                    <MudTextField @bind-Value="question.Response.Value" Label="Enter your answer" />
                                    break;

                                case QuestionType.Check:
                                    <MudSwitch @bind-Value="question.SelectedBoolean" />
                                    break;

                                case QuestionType.SelectBox:
                                    <MudSelect @bind-Value="question.Response.Value" Label="Select an option">
                                        @foreach (var option in question.Answers)
                                        {
                                            <MudSelectItem Value="@option.ID.ToString()">@option.AnswerText</MudSelectItem>
                                        }
                                    </MudSelect>
                                    break;

                                case QuestionType.Date:
                                    <MudDatePicker @bind-Date="question.DateResponse" Label="Pick a date" />
                                    break;

                                case QuestionType.Number:
                                    <MudNumericField @bind-Value="question.NumericResponse" Label="Enter a number" />
                                    break;
                            }
                        }

                    </ChildContent>

                </MudExpansionPanel>
            }
        </MudForm>
        <MudButton ButtonType="ButtonType.Submit" OnClick="SubmitAnswers" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" Disabled="@disabled">Next</MudButton>
    }
</MudPaper>

@code {
    private MudForm form;

    [Inject] private IDonorService DonorService { get; set; }
    [Inject] private IQuestionService QuestionService { get; set; }
    [Parameter] public int DonorId { get; set; }
    [Parameter] public EventCallback<bool> OnQuestionaireRegistered { get; set; }
    private bool disabled = false;
    private List<QuestionaireViewModel> questionsList = new();

    protected override async Task OnInitializedAsync()
    {
        var result = await QuestionService.GetDonorQuestionaire(DonorId);
        questionsList = result.Result ?? new List<QuestionaireViewModel>();
    }

    private async Task SubmitAnswers()
    {
        await form.Validate();

        if (form.IsValid)
        {
            await DonorService.SubmitAnswers(questionsList);
            disabled = true;
            OnQuestionaireRegistered.InvokeAsync(true);
        }
    }


}

