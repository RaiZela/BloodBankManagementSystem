@page "/add-examination"
@using BloodBankManagementSystem.BLL.Services
@using BloodBankManagementSystem.BLL.Services.Questions
@using MudBlazor
@using Newtonsoft.Json
@using Shared.ViewModels
@using static General.Enums
@using General

@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<PageTitle>Examinationa</PageTitle>

<MudDataGrid T="ExaminationViewModel" MultiSelection="true" Items="@Examinations" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" ReadOnly="@_readOnly" EditMode="@DataGridEditMode.Form"
             StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
             Bordered="true" Dense="true" EditTrigger="@DataGridEditTrigger.Manual" @ref="@_dataGrid">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Examinations</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="ExaminationViewModel" />
        <PropertyColumn Property="x => x.Code" />
        <PropertyColumn Property="x => x.Description"/>
            <PropertyColumn Property="x => x.IsEnabled">
                <EditTemplate>
                    <MudSwitch @bind-Value="context.Item.IsEnabled">
                        </MudSwitch>
                </EditTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.ReferenceValues" Hidden="true">
                <EditTemplate>
                    <MudList>
                        @foreach (var reference in context.Item.ReferenceValues)
                        {
                            <MudListItem>
                                <MudNumericField T="decimal" @bind-Value="reference.MinValue" Label="Minimal Value" />
                                <MudNumericField T="decimal" @bind-Value="reference.MaxValue" Label="Maximal Value" />
                            </MudListItem>
                        }
                        <MudListItem>
                            <MudNumericField T="decimal?" @bind-Value="minValue" Label="Minimal Value" />
                            <MudNumericField T="decimal?" @bind-Value="maxValue" Label="Maximal Value" />
                            <MudButton OnClick="@(async () => await AddNewReferenceValue(context.Item))">Add Reference Value</MudButton>
                        </MudListItem>
                    </MudList>
                </EditTemplate>
            </PropertyColumn>
            <TemplateColumn Hidden="@_readOnly" CellClass="d-flex justify-end" HeaderClass="d-flex justify-center">
                <HeaderTemplate>
                    <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.AddCircle" OnClick="@(()=>_dataGrid.SetEditingItemAsync(new ExaminationViewModel()))" />
                </HeaderTemplate>
                <CellTemplate>
                    <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                    <MudIconButton Size="@Size.Medium" Style="@($"color:{Colors.Red.Accent4}; background:{Colors.Shades.White};")" Icon="@Icons.Material.Outlined.DeleteForever" OnClick="@(()=>OnDeleteButtonClickedAsync(context.Item))" />
                </CellTemplate>
            </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ExaminationViewModel" />
    </PagerContent>
</MudDataGrid>


<MudMessageBox @ref="_mudMessageBox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        Deleting can <b><i>not</i></b> be undone!
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    private IEnumerable<ExaminationViewModel> Examinations = new List<ExaminationViewModel>();
    private string _searchString = "";
    private List<string> _events = new();
    private bool _readOnly;
    private MudMessageBox _mudMessageBox;
    private string _state = "Message box hasn't been opened yet";
    private MudDataGrid<ExaminationViewModel> _dataGrid = new MudDataGrid<ExaminationViewModel>();
    private decimal? minValue;
    private decimal? maxValue;

    [Inject] private IExaminationService ExaminationService { get; set; }

    private Func<ExaminationViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Code.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Description.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        await GetUpdatedGrid();
    }

    void StartedEditingItem(ExaminationViewModel item)
    {
        if (item.ReferenceValues == null || item.ReferenceValues.Count == 0)
            item.ReferenceValues = new List<ReferenceValueViewModel>();

        _events.Insert(0, $"Event = StartedEditingItem, Data = {JsonConvert.SerializeObject(item)}");
    }

    void CanceledEditingItem(ExaminationViewModel item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {JsonConvert.SerializeObject(item)}");
    }

    async void CommittedItemChanges(ExaminationViewModel item)
    {
        if (item.ID == 0)
        {
            var result = await ExaminationService.CreateExaminationAsync(item);
            if (result.Success)
                _events.Insert(0, $"Event = StartedEditingItem, Data = {JsonConvert.SerializeObject(item)}");
        }
        else
        {
            var result = await ExaminationService.UpdateExaminationAsync(item);
            if (result.Success)
                _events.Insert(0, $"Event = StartedEditingItem, Data = {JsonConvert.SerializeObject(item)}");
        }
        await GetUpdatedGrid();
        StateHasChanged();

    }

    private async Task OnDeleteButtonClickedAsync(ExaminationViewModel item)
    {
        bool? result = await _mudMessageBox.ShowAsync();
        _state = result is null ? "Canceled" : "Deleted!";
        if (result == true)
        {
            var actionResult = await ExaminationService.DeleteExaminationAsync(item.ID);
            if (actionResult.Success)
                _events.Insert(0, $"Event = StartedEditingItem, Data = {JsonConvert.SerializeObject(item)}");
        }
        await GetUpdatedGrid();
        StateHasChanged();
    }

    private async Task GetUpdatedGrid()
    {
        var result = await ExaminationService.GetAllExaminationsAsync();
        Examinations = (List<ExaminationViewModel>)(result.Result == null ? Examinations : result.Result);
    }

    private async Task AddNewReferenceValue(ExaminationViewModel examination)
    {
        if (minValue != null && maxValue != null)
        {
            examination.ReferenceValues.Add(new ReferenceValueViewModel
                {
                    ExaminationID = examination.ID,
                    MinValue = decimal.MinValue,
                    MaxValue = decimal.MaxValue
                });
            minValue = 0;
            maxValue = 0;
        }
    }
}