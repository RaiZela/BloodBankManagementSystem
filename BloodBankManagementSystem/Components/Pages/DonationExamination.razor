 @using BLL.Services.Donation
@using BloodBankManagementSystem.BLL.Services
 @using BloodBankManagementSystem.BLL.Services.Questions
 @using MudBlazor
 @using Newtonsoft.Json
 @using Shared.ViewModels
 @using static General.Enums
 @using General
 @rendermode InteractiveServer
 @using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<style>
    .category-header {
        background-color: rgba(33, 150, 243, 1);
        padding: 8px;
        margin-bottom: 16px;
        border-radius: 5px;
        color: white;
    }
</style>
<MudPaper Class="pa-4">

    <MudText Typo="Typo.h6" GutterBottom="true">Examination</MudText>

    @if (ExaminationList.Count == 0)
    {
        <MudText Typo="Typo.body1">No examination available.</MudText>
    }
    else
    {
        <MudGrid>
            @foreach (var examination in ExaminationList)
            {
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="d-flex category-header">@examination.Description</MudText>
                </MudItem>

                <MudItem xs="12">
                    <MudText Typo="Typo.subtitle2">Reference Values:</MudText>
                </MudItem>

                @foreach (var reference in examination.ReferenceValues)
                {
                    <MudItem xs="6">
                        <MudText>
                            @($"{reference.MinValue} - {reference.MaxValue} {UnitsOfMeasurement.FirstOrDefault(u => u.ID == reference.UnitOfMeasurementID)?.Description}")
                        </MudText>
                    </MudItem>
                }

                <MudItem xs="12">
                    <MudText Typo="Typo.subtitle2">Examination Result:</MudText>
                </MudItem>

                <MudItem xs="6">
                    <MudNumericField T="double"
                                     @bind-Value="examination.ExaminationResult.ResultValue"
                                     Label="Result Value"
                                     Variant="Variant.Outlined"
                                     Immediate="true"
                                     Class="mb-2"
                                     Error="@(!IsWithinRange(examination.ExaminationResult.ResultValue, examination.ReferenceValues.First().MinValue, examination.ReferenceValues.First().MaxValue))"
                                     ErrorText="Value is out of the valid range!" />
                </MudItem>
            }
        </MudGrid>
        <MudButton OnClick="SaveExaminationResults" Disabled="disabled" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
    }

   


</MudPaper>

@code {
    [Inject] private IDonorService DonorService { get; set; }
    [Inject] private IExaminationService ExaminationService { get; set; }
    [Inject] private IUnitOfMeasurementService UnitOfMeasurementService { get; set; }
    [Parameter] public int DonorId { get; set; }
    [Parameter] public EventCallback<bool> OnExaminationRegistered { get; set; }
    private bool disabled = false;
    private List<DonationExaminationViewModel> ExaminationList = new();
    private List<UnitOfMeasurementViewModel> UnitsOfMeasurement = new();
    protected override async Task OnInitializedAsync()
    {
        // Load questions based on the DonorId
        var result = await ExaminationService.GetDonorFormExaminationsAsync();
        ExaminationList = result.Result ?? new List<DonationExaminationViewModel>();
        var units = await UnitOfMeasurementService.GetAll();
        UnitsOfMeasurement = units.Result ?? UnitsOfMeasurement;
    }


    private bool IsWithinRange(double value, double minValue, double maxValue)
    {
        if (value != 0)
            return value >= minValue && value <= maxValue;

        return true;
    }


    private async Task SaveExaminationResults()
    {
        var resultsToSave = ExaminationList.Select(examination => new ExaminationResultViewModel
            {
                ExaminationID = examination.ID,
                ResultValue = examination.ExaminationResult.ResultValue,
                DonorID = DonorId

            }).ToList();

        await ExaminationService.SaveDonorExaminationsAsync(resultsToSave);

        disabled = true;
        OnExaminationRegistered.InvokeAsync(true);
    }
}

