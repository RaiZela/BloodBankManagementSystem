@page "/add-question"
@using BloodBankManagementSystem.BLL.Services.Questions
@using MudBlazor
@using Newtonsoft.Json
@using Shared.ViewModels
@using static General.Enums
@using General

@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<PageTitle>Questionaire</PageTitle>

<MudDataGrid T="QuestionViewModel" MultiSelection="true" Items="@Questions" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" ReadOnly="@_readOnly" EditMode="@DataGridEditMode.Form"
             StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
             Bordered="true" Dense="true" EditTrigger="@DataGridEditTrigger.Manual" @ref="@_dataGrid">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Questions</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="QuestionViewModel" />
        <PropertyColumn Property="x => x.Text" />
        <PropertyColumn Property="x => x.Category">
            <EditTemplate>
                <MudSelect T="QuestionCategory" @bind-Value="context.Item.Category" Label="Category">
                    @foreach (QuestionCategory category in Enum.GetValues(typeof(QuestionCategory)))
                    {
                        <MudSelectItem T="QuestionCategory" Value="@category">@category.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.Type">
            <EditTemplate>
                <MudSelect T="QuestionType" @bind-Value="context.Item.Type" Label="Type">
                    @foreach (QuestionType type in Enum.GetValues(typeof(QuestionType)))
                    {
                        <MudSelectItem T="QuestionType" Value="@type">@type.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Answers" Hidden="true">
            <EditTemplate>
                <MudList>
                    @foreach (var answer in context.Item.Answers)
                    {
                        <MudListItem>
                            <MudTextField T="string" @bind-Value="answer.AnswerText" Label="Answer" />
                        </MudListItem>
                    }
                    <MudListItem>
                        <MudTextField T="string" @bind-Value="newAnswerText" Label="New Answer" />
                        <MudButton OnClick="@(async () => await AddNewAnswer(context.Item))">Add Answer</MudButton>
                    </MudListItem>
                </MudList>
            </EditTemplate>
        </PropertyColumn>
        <TemplateColumn Hidden="@_readOnly" CellClass="d-flex justify-end" HeaderClass="d-flex justify-center">
            <HeaderTemplate>
                <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.AddCircle" OnClick="@(()=>_dataGrid.SetEditingItemAsync(new QuestionViewModel()))" />
            </HeaderTemplate>
            <CellTemplate>
                <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                <MudIconButton Size="@Size.Medium" Style="@($"color:{Colors.Red.Accent4}; background:{Colors.Shades.White};")" Icon="@Icons.Material.Outlined.DeleteForever" OnClick="@(()=>OnDeleteButtonClickedAsync(context.Item))" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="QuestionViewModel" />
    </PagerContent>
</MudDataGrid>


<MudMessageBox @ref="_mudMessageBox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        Deleting can <b><i>not</i></b> be undone!
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
    </YesButton>
</MudMessageBox>

@code{
    private List<QuestionViewModel> Questions = new List<QuestionViewModel>();
    private string _searchString = "";
    private List<string> _events = new();
    private bool _readOnly;
    private MudMessageBox _mudMessageBox;
    private string _state = "Message box hasn't been opened yet";
    private MudDataGrid<QuestionViewModel> _dataGrid = new MudDataGrid<QuestionViewModel>();
    private string newAnswerText;

    [Inject] private IQuestionService QuestionsService { get; set; }

    private Func<QuestionViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Text.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Type.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Category.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        await GetUpdatedGrid();
    }

    void StartedEditingItem(QuestionViewModel item)
    {
        if (item.Answers == null || item.Answers.Count == 0)
            item.Answers = new List<AnswerViewModel>();

        _events.Insert(0, $"Event = StartedEditingItem, Data = {JsonConvert.SerializeObject(item)}");
    }

    void CanceledEditingItem(QuestionViewModel item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {JsonConvert.SerializeObject(item)}");
    }

    async void CommittedItemChanges(QuestionViewModel item)
    {
        if (item.ID == 0)
        {
            var result = await QuestionsService.CreateQuestionAsync(item);
            if (result.Success)
                _events.Insert(0, $"Event = StartedEditingItem, Data = {JsonConvert.SerializeObject(item)}");
        }
        else
        {
            var result = await QuestionsService.UpdateQuestionAsync(item);
            if (result.Success)
                _events.Insert(0, $"Event = StartedEditingItem, Data = {JsonConvert.SerializeObject(item)}");
        }
        await GetUpdatedGrid();
        StateHasChanged();

    }

    private async Task OnDeleteButtonClickedAsync(QuestionViewModel item)
    {
        bool? result = await _mudMessageBox.ShowAsync();
        _state = result is null ? "Canceled" : "Deleted!";
        if (result == true)
        {
            var actionResult = await QuestionsService.DeleteQuestionAsync(item.ID);
            if (actionResult.Success)
                _events.Insert(0, $"Event = StartedEditingItem, Data = {JsonConvert.SerializeObject(item)}");
        }
        await GetUpdatedGrid();
        StateHasChanged();
    }

    private async Task GetUpdatedGrid()
    {
        var result = await QuestionsService.GetAllQuestionsAsync();
        Questions = (List<QuestionViewModel>)(result.Result == null ? Questions : result.Result);
    }

    private async Task AddNewAnswer(QuestionViewModel question)
    {
        if (!string.IsNullOrWhiteSpace(newAnswerText))
        {
            question.Answers.Add(new AnswerViewModel { AnswerText = newAnswerText });
            newAnswerText = string.Empty;
        }
    }
}