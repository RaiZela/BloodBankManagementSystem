@page "/user-management"
@using MudBlazor
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<MudContainer>
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Create or Edit User</MudText>
                </MudCardHeader>
                
                <MudCardContent>
                    <MudForm @ref="form" Model="@user">
                        <MudTextField Label="First Name" @bind-Value="user.FirstName" Required="true" />
                        <MudTextField Label="Last Name" @bind-Value="user.LastName" Required="true" />
                        <MudTextField Label="Email" @bind-Value="user.Email" Required="true" Type="email" />
                        <MudTextField Label="Identity Number" @bind-Value="user.IdentityNumber" Required="true" />

                        <!-- File Upload for Photo -->
                        <InputFile OnChange="HandleFileChange" />
                        <MudAvatar Src="@user.PhotoUrl" Size="Size.Large" />
                    </MudForm>
                </MudCardContent>
                
                <MudCardActions>
                    <MudButton OnClick="SaveUser">
                        Save
                    </MudButton>
                    <MudButton OnClick="ClearForm">
                        Clear
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private MudForm form;
    private UserModel user = new UserModel();

    private async Task SaveUser()
    {
        if (form.IsValid)
        {
            // Save or update user logic here
        }
    }

    private void ClearForm()
    {
        user = new UserModel();
        //form.Reset();
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;

        // Process file (e.g., upload it to a server or save locally)
        // Example: read the file and save it as a URL for now (e.g., in the user.PhotoUrl)
        var stream = file.OpenReadStream();
        var buffer = new byte[file.Size];
        await stream.ReadAsync(buffer, 0, (int)file.Size);
        user.PhotoUrl = "data:image/png;base64," + Convert.ToBase64String(buffer); // Placeholder for uploaded image
    }

    public class UserModel
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public string IdentityNumber { get; set; }
        public string PhotoUrl { get; set; }
    }
}
